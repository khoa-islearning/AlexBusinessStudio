@page "/storage"
@layout AdminLayout
@using Radzen


<div class="container">
    <div class="row">
        <div class="col-md-2">
            <div class="sales-sum">
                <h3>Photos:</h3>
                <h4>5917</h4>
            </div>
        </div>


        <div class="col-md-8 d-flex align-items-baseline flex-row" style="justify-content:center; margin: auto;">
            <!--TODO convert styles to css-->
            <button class="btn btn-success" style="display:flex; justify-content:right; align-self: flex-end; margin : 3px" @onclick = "@(e => JsRuntime.InvokeAsync<string>("alert", "Synced with Google Photos"))">
                <RadzenIcon style="justify-content:center; align-content:center" Icon="sync" IconStyle="IconStyle.Light" />&nbsp; Sync
            </button>

            @if(@GetChosenCount() > 1){
                <button class="btn btn-success" style="display:flex; justify-content:right; align-self: flex-end;margin : 3px " @onclick="@(() => chosen = new bool[15])">
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="deselect" IconStyle="IconStyle.Light" />&nbsp; Deselect
                </button>
            }else if(@GetChosenCount() == 1){
                 <button class="btn btn-success" style="display:flex; justify-content:right; align-self: flex-end;margin : 3px " >
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="visibility" IconStyle="IconStyle.Light" />&nbsp; View Image
                </button>
            }

            @if(@GetChosenCount() == 0)
            {
                <button class="btn btn-success" style="display:flex; justify-content:right; align-self: flex-end; margin : 3px" disabled>
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="edit" IconStyle="IconStyle.Light" />&nbsp; Edit
                </button> 
            }else{
                <button class="btn btn-success" style="display:flex; justify-content:right; align-self: flex-end; margin : 3px" @onclick="@(() => ToggleBatchEdit("toggle"))">
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="edit" IconStyle="IconStyle.Light" />&nbsp; Edit (@GetChosenCount())
                </button>
            }


            @if(@GetChosenCount() == 0){
                <button class="btn btn-success" style="display:flex; justify-content:right; align-self: flex-end;margin : 3px " disabled>
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="arrow_right_alt" IconStyle="IconStyle.Light" />&nbsp; List
                </button>
            }else{
                 <button class="btn btn-success" style="display:flex; justify-content:right; align-self: flex-end;margin : 3px "  @onclick="@(() => ToggleBatchList("toggle"))">
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="arrow_right_alt" IconStyle="IconStyle.Light" />&nbsp; List (@GetChosenCount())
                </button>
            }

             @if(@GetChosenCount() == 0)
            {
                <button class="btn btn-danger" style="display:flex; justify-content:right; align-self: flex-end; margin : 3px" disabled>
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="clear" IconStyle="IconStyle.Light" />&nbsp; Remove
                </button> 
            }else{
                <button class="btn btn-danger" style="display:flex; justify-content:right; align-self: flex-end; margin : 3px" @onclick="@(() => RemoveChosen())">
                    <RadzenIcon style="justify-content:center; align-content:center" Icon="clear" IconStyle="IconStyle.Light" />&nbsp; Remove (@GetChosenCount())
                </button>
            }

        </div>


        <div class="col-md-2 d-flex align-items-baseline" style="padding-top : 25px;">

            <!--default html file upload button-->
            <input type="file" id="actual-btn" hidden multiple accept="image/*" @onchange="@(e => JsRuntime.InvokeAsync<string>("alert", "files uploaded"))"/>

            <!--our custom file upload button-->
            <label for="actual-btn" class="fake-button">
                <RadzenIcon style="justify-content:center; align-content:center" Icon="file_upload" IconStyle="IconStyle.Light" />
                &nbsp; Choose File
            </label>


        </div>
    </div>

    <div class="row" style="height:100%;">
        <div class="col-9 overflow-scroll">
            <div class = "row card-view">
                @foreach(var p in GetList())
                {
                    @if (@display[p.Id] && !removed[p.Id])
                    {
                        @if (@chosen[p.Id])
                        {
                            <div class="col-xl-4 p-1" @onclick = "@(e => OnClickPhoto(p.Id))" >
                                <div  style="padding: 1px; border:solid; border-color: #221144; border-radius: 2px">
                                    <h3 class="mt-3">@p.Name</h3>
                                    <RadzenImage Path=@p.Link Style="width: 100%;">
                                    </RadzenImage>
                                </div>
                            </div>                     
              
                        }
                        else
                        {
                            <div class="col-xl-4 p-1" @onclick = "@(e => OnClickPhoto(p.Id))" >
                                <h3 class="mt-3">@p.Name</h3>
                                <RadzenImage Path=@p.Link Style="width: 100%;">
                                </RadzenImage>
                            </div>                     
                        }
                    }
                }
            </div>   
        </div>
        <div class="col-3 info-bar" style="border-radius: 5px;">
            <PhotoSearchBar OnSearch=changeSearch/>
        </div>
    </div>
</div>


@if (IsShowBatchEdit)
{
    <BatchPhotoModifyPopUp OnClick=ToggleBatchEdit pList=GetList() chosen=chosen/>
}

@if (IsShowBatchList)
{
    <BatchPhotoListPopUp OnClick=ToggleBatchList pList=GetList()  chosen=chosen/>   
}

@inject IJSRuntime JsRuntime
@using  AlexBusinessStudio.Data
@code {
    public bool IsShowBatchEdit = false;
    public bool IsShowBatchList = false;

    public bool[] chosen = new bool[15];
    public bool[] display = new bool[15];
    public bool[] removed = new bool[15];
    public int[] listStatus = new int[15];

    public PhotoModel[] pListSize;
    public PhotoModel[] pListDate;
    public PhotoModel[] pListName;

    public int sortBy = 0;




    public void changeSearch(SearchArg s)
    {
        sortBy = s.sort;

        for ( int i = 0; i < display.Length;i++ ) {
            JsRuntime.InvokeAsync<string>("console.log", $"start:{s.start}, date:{pList[i].Date}, start < date : {pList[i].Date >= s.start}");
            display[i] = s.status[i%3] 
            && (s.searchString.Count() > 0 ? pList[i].Name.ToLower().Intersect(s.searchString.ToLower()).Count() >= 3 : true)
            && pList[i].Date >= s.start
            && pList[i].Date <= s.end
            && (s.tagList.Count() > 0 ? pList[i].TagList.Intersect(s.tagList).Count() > 0 : true);

            if (!display[i])
            {
                chosen[i] = false;
            }
        }

    } 

    public PhotoModel[] GetList()
    {
        if (sortBy == 0)
        {
            return pListName;
        }else if (sortBy == 1)
        {
            return pListSize;
        }
        return pListDate;
    }

    public void ToggleBatchEdit(string message)
    {
        IsShowBatchEdit = !IsShowBatchEdit;
        if (message == "save") { JsRuntime.InvokeAsync<string>("alert", "Changes saved"); }

    } 

    public void ToggleBatchList(string message)
    {
        IsShowBatchList = !IsShowBatchList;
        if (message == "save") { JsRuntime.InvokeAsync<string>("alert", "Chosen photo are listed"); }

    }

     public void RemoveChosen()
    {
        int count = 0;
        for ( int i = 0; i < chosen.Length;i++ ) {
            if (chosen[i])
            {
                count++;
                removed[i] = true;
            }
            chosen[i] = false;
        }
        JsRuntime.InvokeAsync<string>("alert", $"{count} photo(s) removed");
    }

    protected override async Task OnInitializedAsync()
    {
        for ( int i = 0; i < display.Length;i++ ) {
            display[i] = true;
            listStatus[i] = i % 3;
        }

        pListSize = new PhotoModel[15];
        pListDate = new PhotoModel[15];
        pListName = new PhotoModel[15];
        Array.Copy(pList, pListSize, pList.Length);
        Array.Sort(pListSize, (p1,p2)=> p1.x.CompareTo(p2.x));
        
        Array.Copy(pList, pListDate, pList.Length);
        Array.Sort(pListDate, (p1,p2)=> p1.Date.CompareTo(p2.Date));

        Array.Copy(pList, pListName, pList.Length);
        Array.Sort(pListName, (p1,p2)=> p1.Name.CompareTo(p2.Name));
    }


    public void OnClickPhoto(int id)
    {
        chosen[id] = !chosen[id];
    }

    public int GetChosenCount()
    {
        return chosen.Count(n => n == true);
    }

    public PhotoModel[] pList = new PhotoModel[]
        {
        new PhotoModel
        {
            Id = 0,
            Name = "cow.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/02/17/17/21/cows-7019167__340.jpg",
            Note = "Taken in BaVi",
            Date = new DateTime(2020, 1, 1),
           
        },
        new PhotoModel
        {
            Id = 1,
            Name = "staring.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/03/27/11/23/cat-7094808__340.jpg",
            Note = "Neighbor's cat",
            Date = new DateTime(2021, 1, 30),
            TagList = new string[] {"Cat", "Animal"}
        },
        new PhotoModel
        {
            Id = 2,
            Name = "eating_sheep.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/02/12/21/02/heather-7009925__340.jpg",
            Note = "Northen farm",
            Date = new DateTime(2022, 01, 29)
        },
        new PhotoModel
        {
            Id = 3,
            Name = "angel.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/03/01/20/58/peace-genius-7042013__340.jpg",
            Note = "City Square",
            Date = new DateTime(2019, 05, 19),
            TagList = new string[] {"City"}


        },
        new PhotoModel
        {
            Id = 4,
            Name = "street_lamp.jpg",
            Link = "https://cdn.pixabay.com/photo/2013/03/02/02/41/alley-89197__480.jpg",
            Note = "Random Nights",
            TagList = new string[] {"City"}

        },
        new PhotoModel
        {
            Id = 5,
            Name = "mountain.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/01/12/19/28/mountains-6933693__340.jpg",
            Note = "Mountain House",
            Date = new DateTime(2021, 03, 12),
            TagList = new string[] {"Nature"}

        }
        ,new PhotoModel
        {
            Id = 6,
            Name = "windmill.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/01/10/15/29/wind-mills-6928590__340.jpg",
            Note = "Sunny Day",
            Date = new DateTime(2018,07, 20),
            TagList = new string[] {}
        }
        ,new PhotoModel
        {
            Id = 7,
            Name = "calf.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/03/25/10/19/calf-7090719__340.jpg",
            Note = "This calf came out of nowhere",
            Date = new DateTime(2019, 04, 30)
        },
        new PhotoModel
        {
            Id =8,
            Name = "stair.jpg",
            Link = "https://cdn.pixabay.com/photo/2021/12/07/14/00/river-6853339__340.jpg",
            Note = "Wet stairs, cautions",
            Date = new DateTime(2020, 12, 12),
            TagList = new string[] {"City", "Rain"}
        },
        new PhotoModel
        {
            Id = 9,
            Name = "town.jpg",
            Link = "https://cdn.pixabay.com/photo/2021/08/30/21/29/port-6587129__480.jpg",
            Note = "On a sailboat",
            Date = new DateTime(2019, 3, 20),
            TagList = new string[] {"City", "Nature", "Ocean"}
        },
        new PhotoModel
        {
            Id = 10,
            Name = "hare.jpg",
            Link = "https://cdn.pixabay.com/photo/2021/04/20/15/04/hare-6194141__340.jpg",
            Note = "On a soccer field",
            TagList = new string[] {"Cycling", "Sport"}
        },
        new PhotoModel
        {
            Id = 11,
            Name = "cycling.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/02/27/06/33/man-7036709__340.jpg",
            Note = "My Friend",
            Date = new DateTime(2019, 5, 25)
        },
        new PhotoModel
        {
            Id = 12,
            Name = "small_bird.jpg",
            Link = "https://cdn.pixabay.com/photo/2022/02/23/18/08/kingfisher-7031148__480.jpg",
            Note = "cute",
            Date = new DateTime(2022, 1, 29),
            TagList = new string[] {"Bird", "Animal", "Nature"}
        },
        new PhotoModel
        {
            Id = 13,
            Name = "flower_dog.jpg",
            Link = "https://cdn.pixabay.com/photo/2021/09/19/12/19/animal-6637774__340.jpg",
            Note = "dog and flower",
            Date = new DateTime(2021, 12, 29),
            TagList = new string[] {"Dog", "Animal", "Nature"}
        },
        new PhotoModel
        {
            Id = 14,
            Name = "staring_dog.jpg",
            Link = "https://cdn.pixabay.com/photo/2018/03/31/06/31/dog-3277416__340.jpg",
            Note = "staring context",
            TagList = new string[] {"Dog", "Animal"}
        },
        };
        
}
